update_fastlane

import "../../scripts/Fastfile"
fastlane_require 'dotenv'

default_platform(:android)

platform :android do
  platform = "android"
  flavor = ENV['ANDROID_SCHEME']
  release_path = flavor == 'dev' ? 'devRelease' : 'prodRelease'
  aab_path = "#{root_path}/build/app/outputs/bundle/#{release_path}/app-#{flavor}-release.aab"

  private_lane :build_aab do
    params = "-t lib/main_#{flavor}.dart"
    sh_on_root(command: "flutter build appbundle --split-debug-info #{params} --flavor #{flavor}")
    # sh_on_root(command: "fvm use #{ENV['FLUTTER_VERSION']} && fvm flutter build apk --split-per-abi #{params}")
  end

  lane :deploy_firebase_distribution do
    # after_all do |lane|
      # slack(message: "Successfully deployed Android App", slack_url: ENV['SLACK_URL'])
    # end

    # slack(message: "Fastlane Android build start", slack_url: ENV['SLACK_URL'])

    # begin
    fetch_google_application_credentials
    build_aab
    distribution_service_credentials_file = "#{root_path}/.firebase/#{flavor}/bomb-fruitshop.json"

    firebase_app_distribution(
      app: ENV['ANDROID_FIREBASE_APP_DISTRIBUTION_APP'],
      service_credentials_file: distribution_service_credentials_file,
      android_artifact_type: "AAB",
      android_artifact_path: aab_path,
      release_notes: ENV['ANDROID_FIREBASE_APP_DISTRIBUTION_RELEASE_NOTES'],
      testers:ENV['ANDROID_FIREBASE_APP_DISTRIBUTION_TESTER'],
      # groups: "QA_TEAM",
    )
  end

  lane :internal do
    fetch_google_application_credentials
    build_aab
    upload_to_play_store(
      track: 'internal',
      json_key_data:  ENV['AUTHENTICATE_GOOGLE_JSON_FILE_PATH']
      #  json_key: ENV['AUTHENTICATE_GOOGLE_JSON_FILE_PATH'],
    )
    # # slack(message: 'Successfully distributed a new beta build')
  end

  lane :alpha do
    fetch_google_application_credentials
    build_aab
    upload_to_play_store(track: 'alpha')
    # # slack(message: 'Successfully distributed a new beta build')
  end

  lane :beta do
  fetch_google_application_credentials
  build_aab
  upload_to_play_store(track: 'beta')
  # # slack(message: 'Successfully distributed a new beta build')
  end

  lane :deploy do
      # increase_version
      # sh "flutter build appbundle -t lib/main_dev.dart --flavor "+flavor
      build_aab
      upload_to_play_store(track:'production')
  end



  

  lane :fetch_google_application_credentials do 
    service_account_user_credentials_file = "#{root_path}/.firebase/service_account_user.json"
    project_id = "pc-api-8735604440160345818-521"
    key_file = "/Users/ska/coding/Certificates_Keys/GoogleCloud/deploy_play_console_api_access_service_account.json"
    require "google/cloud/storage"

    # Explicitly use service account credentials by specifying the private key
    # file.
    storage = Google::Cloud::Storage.new project: project_id, keyfile: key_file

    # Make an authenticated API request
    storage.buckets.each do |bucket|
        puts bucket.name
    end
  end
end
